[{"/Users/junyoung/Desktop/dream_coding/react-basic/template/src/index.js":"1","/Users/junyoung/Desktop/dream_coding/react-basic/template/src/app.jsx":"2","/Users/junyoung/Desktop/thegrowing/thegrowing/src/index.js":"3","/Users/junyoung/Desktop/thegrowing/thegrowing/src/app.jsx":"4","/Users/junyoung/Desktop/thegrowing/thegrowing/src/components/calendar.jsx":"5"},{"size":222,"mtime":1609864467193,"results":"6","hashOfConfig":"7"},{"size":96,"mtime":1609864413038,"results":"8","hashOfConfig":"7"},{"size":222,"mtime":1618291849570,"results":"9","hashOfConfig":"10"},{"size":163,"mtime":1618293405923,"results":"11","hashOfConfig":"10"},{"size":8979,"mtime":1618422458881,"results":"12","hashOfConfig":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cvdbtv",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"cxvpo9",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/junyoung/Desktop/dream_coding/react-basic/template/src/index.js",[],"/Users/junyoung/Desktop/dream_coding/react-basic/template/src/app.jsx",[],"/Users/junyoung/Desktop/thegrowing/thegrowing/src/index.js",[],"/Users/junyoung/Desktop/thegrowing/thegrowing/src/app.jsx",[],"/Users/junyoung/Desktop/thegrowing/thegrowing/src/components/calendar.jsx",["24","25","26","27","28","29","30","31","32","33"],"import React, { useEffect, useState } from 'react';\nimport './calendar.css';\nimport convert from 'xml-js';\n\nlet temp;\nconst Calendar = () => {\n  //현재 날짜를 가지고옴\n  const [date, setDate] = useState(new Date());\n  const [year, setYear] = useState(date.getFullYear());\n  const [month, setMonth] = useState(date.getMonth() + 1);\n  //현재 month에서 오늘 날짜가 들어있는 index를 확인하기 위한 변수\n  const [todayIndex, setTodayIndex] = useState();\n  //오늘 날짜를 찾았을 경우 렌더링을 활성화할 트리거\n  const [isFinded, setIsFinded] = useState(false);\n  //현재 month를 임시변수 temp에 한번만 저장할 트리거\n  const [isOnce, setIsOnce] = useState(false);\n  //현재 month를 기준으로 공휴일 객체를 저장할곳\n  const [holiday, setHoliday] = useState([]);\n  //현재 month와 비교하여 공휴일이 어디에 있는지 index를 확인하기 위한 변수\n  const [holidayIndex, setHolidayIndex] = useState();\n  const [isloading, setIsloading] = useState(false);\n  const newDate = `${year}년 ${month}월`;\n  const apiKey =\n    '0FpsfZ1B%2Fdvq1vp1e3FVJvC3c7ahRMgegA27sJVws%2FT6psvSAWMTt%2Fk242B5AjdbxNx8BMgwS43kEUnG38Z%2BtA%3D%3D';\n\n  //지난달 마지막 date, 이번달 마지막 date\n  const prevLast = new Date(year, month - 1, 0);\n  const thisLast = new Date(year, month, 0);\n\n  //이전달 날짜, 요일(0:일 ~ 6:토)\n  const prevDate = prevLast.getDate();\n  const prevDay = prevLast.getDay();\n\n  //이번달 날짜, 요일(0:일 ~ 6:토)\n  const thisDate = thisLast.getDate();\n  const thisDay = thisLast.getDay();\n\n  //이전달, 현재달, 다음달을 저장할 배열\n  const prevDates = [];\n  const thisDates = [...Array(thisDate + 1).keys()].slice(1);\n  const nextDates = [];\n\n  if (prevDay !== 6) {\n    for (let i = 0; i < prevDay + 1; i++) {\n      prevDates.unshift(prevDate - i);\n    }\n  }\n  //7일씩 6주의 레이아웃으로 구성\n  const len = 42 - (prevDates.length + thisDates.length);\n  for (let i = 1; i <= len; i++) {\n    nextDates.push(i);\n  }\n\n  //한 화면에 표시할 전체의 day의 배열\n  const dates = [...prevDates, ...thisDates, ...nextDates];\n\n  useEffect(() => {\n    if (!isOnce) {\n      temp = [...thisDates];\n      setIsOnce(true);\n    }\n  }, [isOnce]);\n\n  //이전달 버튼\n  const prevMonth = () => {\n    if (month === 1) {\n      setYear((prev) => prev - 1);\n      setMonth(12);\n    } else {\n      setMonth((prev) => prev - 1);\n    }\n    setIsFinded(false);\n  };\n  //오늘 날짜로 이동 버튼\n  const goToday = () => {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = now.getMonth() + 1;\n    const findToday = temp.findIndex((element, index) => {\n      if (element === date.getDate()) return index;\n    });\n    setYear(year);\n    setMonth(month);\n    setTodayIndex(findToday);\n    setIsFinded(true);\n  };\n  //다음달 버튼\n  const nextMonth = () => {\n    if (month === 12) {\n      setYear((prev) => prev + 1);\n      setMonth(1);\n    } else {\n      setMonth((prev) => prev + 1);\n    }\n    setIsFinded(false);\n  };\n\n  //현재 월을 기준으로 이전달과 다음달의 나머지 날짜는 흐림으로 처리\n  const prevIndex = prevDates.length - 1;\n  const thisIndex = prevIndex + thisDates.length;\n\n  //숫자가 한자리 수 month or day일 경우 앞에 '0'을 붙여서 두자리로 표기\n  const makeZeroString = (number) => {\n    let numberStr = '0' + number;\n    numberStr = numberStr.slice(-2);\n    return numberStr;\n  };\n\n  //공휴일 api url\n  const url = (myyear, mymonth) => {\n    return `/B090041/openapi/service/SpcdeInfoService/getRestDeInfo?solYear=${myyear}&solMonth=${mymonth}&ServiceKey=${apiKey}`;\n  };\n\n  //공휴일 api를 호출하여 실행할 함수\n  const search = () => {\n    const requestOptions = {\n      method: 'GET',\n      redirect: 'follow',\n      headers: { 'Access-Control-Allow-Origin': '*' },\n    };\n    fetch(url(year, makeZeroString(month)), requestOptions)\n      .then((response) => response.text())\n      .then((result) => {\n        let xml = convert.xml2json(result, { compact: false, spaces: 4 });\n        xml = JSON.parse(xml);\n\n        const dates = xml.elements[0].elements[1].elements[0].elements;\n        const dateArr = [];\n        if (dates.length !== 0) {\n          for (let i = 0; i < dates.length; i++) {\n            const { elements: dateObj } = dates[i];\n            const obj = {\n              name: dateObj[1].elements[0].text,\n              date: dateObj[3].elements[0].text.slice(6, 8),\n            };\n            dateArr.push(obj);\n          }\n          setHoliday(dateArr);\n        }\n      })\n      .catch((error) => {\n        setHoliday([]);\n      });\n  };\n  //이전달 다음달 이동시 month가 변경될때마다 공휴일 api를 호출하여 데이터를 가져옴\n  useEffect(() => {\n    search();\n  }, [month]);\n\n  //공휴일 객체가 생기면 각각 필요한 인덱스를 알아내기 위한 훅\n  useEffect(() => {\n    if (holiday) {\n      const arr = holiday.map((item) => {\n        return parseInt(item.date);\n      });\n      const findIndex = [];\n      for (let i = 0; i < arr.length; i++) {\n        let findHoliday = thisDates.findIndex((element, index) => {\n          if (element === arr[i]) {\n            return index;\n          }\n        });\n        if (findHoliday === -1) {\n          findHoliday = 0;\n        }\n        findIndex.push(findHoliday);\n      }\n      setHolidayIndex(findIndex);\n      setIsloading(true);\n    }\n  }, [holiday]);\n\n  //클릭 이벤트로 해당 일자에 이벤트를 추가할 함수\n  const onClick = (e) => {\n    let onDiv = document.createElement('div');\n    onDiv.innerHTML = window.prompt('이벤트 이름 입력', '새로운 이벤트');\n    onDiv.className = `event`;\n    document.getElementsByClassName(e.target.className)[0].append(onDiv);\n  };\n\n  return (\n    <div className='container'>\n      {isloading ? (\n        <>\n          <div className='header'>\n            <div className='date'>{newDate}</div>\n            <div className='pageNavi'>\n              <button onClick={prevMonth}>&lt;</button>\n              <button onClick={goToday}>오늘</button>\n              <button onClick={nextMonth}>&gt;</button>\n            </div>\n          </div>\n          <div className='day'>\n            <div>일</div>\n            <div>월</div>\n            <div>화</div>\n            <div>수</div>\n            <div>목</div>\n            <div>금</div>\n            <div>토</div>\n          </div>\n          <div className='body'>\n            <div className={`month ${month}`}>\n              {/* 이전 달 */}\n              {prevDates.map((date, index) => {\n                return (\n                  <div key={index} style={{ color: 'grey' }}>\n                    <p>{date}일</p>\n                  </div>\n                );\n              })}\n\n              {/* 현재 달 */}\n              {thisDates.map((date, index) => {\n                let test = <p>{date}일</p>;\n                if (index === 0) {\n                  test = (\n                    <p>\n                      {month}월 {date}일\n                    </p>\n                  );\n                }\n                holidayIndex.map((hol, idx) => {\n                  if (index === hol && index === 0) {\n                    test = (\n                      <>\n                        <p>\n                          {month}월 {date}일\n                        </p>\n                        {holiday.length !== 0 && holiday[idx] && (\n                          <div className='holiday'>{holiday[idx].name}</div>\n                        )}\n                      </>\n                    );\n                  } else if (index === hol) {\n                    test = (\n                      <>\n                        <p>{date}일</p>\n                        {holiday.length !== 0 && holiday[idx] && (\n                          <div className='holiday'>{holiday[idx].name}</div>\n                        )}\n                      </>\n                    );\n                  }\n                });\n                if (isFinded && index === todayIndex) {\n                  test = (\n                    <p>\n                      <span className='today'>{date}</span>일\n                    </p>\n                  );\n                }\n                const key = `${year}${makeZeroString(month)}${makeZeroString(\n                  date\n                )}`;\n\n                return (\n                  <div key={key} className={key} onClick={onClick}>\n                    {test}\n                  </div>\n                );\n              })}\n\n              {/* 다음 달 */}\n              {nextDates.map((date, index) => {\n                return (\n                  <div key={index} style={{ color: 'grey' }}>\n                    <p>{date}일</p>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </>\n      ) : (\n        <div></div>\n      )}\n    </div>\n  );\n};\n\nexport default Calendar;\n",{"ruleId":"34","severity":1,"message":"35","line":8,"column":16,"nodeType":"36","messageId":"37","endLine":8,"endColumn":23},{"ruleId":"34","severity":1,"message":"38","line":36,"column":9,"nodeType":"36","messageId":"37","endLine":36,"endColumn":16},{"ruleId":"34","severity":1,"message":"39","line":55,"column":9,"nodeType":"36","messageId":"37","endLine":55,"endColumn":14},{"ruleId":"40","severity":1,"message":"41","line":62,"column":6,"nodeType":"42","endLine":62,"endColumn":14,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":79,"column":55,"nodeType":"46","messageId":"47","endLine":79,"endColumn":57},{"ruleId":"34","severity":1,"message":"48","line":100,"column":9,"nodeType":"36","messageId":"37","endLine":100,"endColumn":18},{"ruleId":"40","severity":1,"message":"49","line":148,"column":6,"nodeType":"42","endLine":148,"endColumn":13,"suggestions":"50"},{"ruleId":"44","severity":1,"message":"45","line":158,"column":64,"nodeType":"46","messageId":"47","endLine":158,"endColumn":66},{"ruleId":"40","severity":1,"message":"41","line":171,"column":6,"nodeType":"42","endLine":171,"endColumn":15,"suggestions":"51"},{"ruleId":"44","severity":1,"message":"52","line":223,"column":45,"nodeType":"46","messageId":"53","endLine":223,"endColumn":47},"no-unused-vars","'setDate' is assigned a value but never used.","Identifier","unusedVar","'thisDay' is assigned a value but never used.","'dates' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'thisDates'. Either include it or remove the dependency array.","ArrayExpression",["54"],"array-callback-return","Array.prototype.findIndex() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'thisIndex' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'search'. Either include it or remove the dependency array.",["55"],["56"],"Array.prototype.map() expects a return value from arrow function.","expectedInside",{"desc":"57","fix":"58"},{"desc":"59","fix":"60"},{"desc":"61","fix":"62"},"Update the dependencies array to be: [isOnce, thisDates]",{"range":"63","text":"64"},"Update the dependencies array to be: [month, search]",{"range":"65","text":"66"},"Update the dependencies array to be: [holiday, thisDates]",{"range":"67","text":"68"},[1902,1910],"[isOnce, thisDates]",[4252,4259],"[month, search]",[4842,4851],"[holiday, thisDates]"]